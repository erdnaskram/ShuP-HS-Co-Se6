// Initialisiere Semaphoren
//Semaphoren Anwendungen <-> Druckerspooler
Semaphore mutex = 1; 		 	 //Sem-Ringspeicher[0]; Schreibzugriff auf "nextToWrite" aus Ringspeicher
Semaphore warteschlangeLeer = 5; //Sem-Ringspeicher[1]
Semaphore warteschlangeVoll = 0; //Sem-Ringspeicher[2]

//Semaphoren Druckerspooler <-> Drucker
Semaphore druckerwarteschlangeLeer[0] = 1;	//Sem-DruckerKommunikation[0]
Semaphore druckerwarteschlangeLeer[1] = 1;	//Sem-DruckerKommunikation[1]
Semaphore druckerwarteschlangeVoll[0] = 0;	//Sem-DruckerKommunikation[2]
Semaphore druckerwarteschlangeVoll[1] = 0;	//Sem-DruckerKommunikation[3]

SharedMemory warteschlange[7]; // 1.-5. als warteschlange, 6. NextToRead, 7. NextToWrite
SharedMemory sharedMem_Drucker[2]; // 1.-5. als warteschlange, 6. NextToRead, 7. NextToWrite

/**
** Spooler
*/
void Spooler(void) {
	Integer druckerTurn = 0;
	while(true){
		wait(warteschlangeVoll);
		auftrag = leseNaechstenAuftragAusSharedMemory_h(warteschlange);

		wait(druckerwarteschlangeLeer[druckerTurn])
		schreibeAufragAbwechselndAnDrucker_h(druckerTurn, auftrag);
		signal(druckerwarteschlangeVoll[druckerTurn]);

		signal(warteschlangeLeer);

		druckerTurn = naechsterDrucker_h(druckerTurn);
	}
}



/**
** Drucker1-Prozess
*/
void Drucker1(void) {
	while(true) {
		wait(druckerwarteschlangeVoll[1])
		schreibeAufragAbwechselndAnDrucker_h(warteschlange);
		signal(druckerwarteschlangeLeer[1]);
	}
}



/**
** Drucker2-Prozess
*/
void Drucker2(void) {
	while(true) {
		wait(druckerwarteschlangeVoll[2])
		schreibeAufragAbwechselndAnDrucker_h(warteschlange);
		signal(druckerwarteschlangeLeer[2]);
	}
}



/**
** Kindprozesse/Erzeuger
*/
void Anwendung(void) {
	while(true) {
		wait(warteschlangeLeer);
		wait(mutex);
		schreibeAuftragInNaechstenFreienSpeicher_h(warteschlange);
		signal(mutex);
		signal(warteschlangeVoll);
	}
}
